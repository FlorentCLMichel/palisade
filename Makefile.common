#
#Copyright (c) 2015, New Jersey Institute of Technology (NJIT)
#All rights reserved.
#Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
#met:
#1. Redistributions of source code must retain the above copyright
#notice, this list of conditions and the following disclaimer.
#2. Redistributions in binary form must reproduce the above copyright
#notice, this list of conditions and the following disclaimer in the
#documentation and/or other materials provided with the distribution.
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
#IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
#TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
#PARTICULAR PURPOSE ARE DISCLAIMED.
#IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
#ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
#OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
#HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
#STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
#IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#POSSIBILITY OF SUCH DAMAGE.
#

################
# Makefile contains core definitions and then includes  build instructions
# for making all the palisade components
################

TEST_LIB := $(LOADTHREADFLAG) -fopenmp $(GMPLIB) -lgomp

# NOTE select the appropriate set of CPPFLAGS 
# most code is checked into git with the first line active

#CPPFLAGS += -Wall -w -g ## undefine for single thread debug NO OPTIMIZATION operation
#CPPFLAGS += -Wall -Ofast -w #-g #undefine for single thread debug operation
#CPPFLAGS += -Wall -Ofast -w -fopenmp  -g ##undefine for parallel debug operation
#CPPFLAGS += -Wall -O3 -w  -DNDEBUG  -pg ##undefine for single thread best performance operation with gprof profiling 

##parallel best performance operation with debug
##warn everything
##no threading or optimization when doing coverage testing
CPPFLAGS += -g -Wall -Werror

## handle coverage test options if user set COVERAGE to any value on the command line
ifdef COVERAGE
	CPPFLAGS += --coverage -Wno-unknown-pragmas
	TEST_LIB += --coverage
	LIBSUFFIX=.a
	LIBCMD=$(AR) crv
else
	CPPFLAGS += -O3 -fopenmp $(COMPTHREADFLAG) ##optimize and threads
endif

## set backend if user set it on the command line
ifdef BACKEND
	CPPFLAGS += -DMATHBACKEND=$(BACKEND)
endif

#CPPFLAGS += -Wall -O3 -w -fopenmp -m64 -DNDEBUG  ##undefine for parallel best performance operation with no debug

#THE OPTIONS BELOW SHOULD BE USED WITH CARE AS THEY USE A LOT OF AGGRESSIVE OPTIMIZATION OPTIONS
#CPPFLAGS += -Wall  Werror -DNDEBUG -m64 -Ofast -flto -march=native -funroll-loops ##undefine for single thread best performance operation
#CPPFLAGS += -Wall -Werror -DNDEBUG -m64 -Ofast -flto -march=native -funroll-loops -fopenmp ##undefine for multithread really best performance operation
#CPPFLAGS += -Wall -Werror -m64 -Ofast -flto -march=native -funroll-loops -fopenmp -DNDEBUG ##undefine for multithread really best performance operation
#CPPFLAGS += -Wall -Werror -m64 -Ofast -flto -march=native -funroll-loops -fopenmp ##undefine for multithread really best performance operation

# base directory of project
ROOTDIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

PROJECT := palisade
VERSION := 1.3.0

#build directory
BUILDDIR := build

#bin directory
BINDIR ?= bin

#sources for palisade library
EXTLIBDIR := $(BINDIR)/lib
EXTTESTDIR := $(BINDIR)/unittest
EXTDEMODIR := $(BINDIR)/demo

# extentions for source and header files
SRCEXT := cpp
HDREXT := h

$(objects) : %.o : %.cpp

# sub makefiles: each src subdirectory needs to be here
SUBMAKEFILES := core pke 

# third party directories
THIRDPARTYDIR := third-party
THIRDPARTYLIBDIR := $(THIRDPARTYDIR)/lib
THIRDPARTYINCLUDE := -I $(THIRDPARTYDIR)/include -I $(THIRDPARTYDIR)/include/rapidjson

# dynamic lib directories on system
ifeq ($(PREFIX),)
	PREFIX := /usr/local
endif
LIB_DEST := $(PREFIX)/lib/$(PROJECT)/$(VERSION)

EXTLIB := -L$(EXTLIBDIR) $(TEST_LIB) #no profiling

INC := -I src $(patsubst %,-Isrc/%/lib,$(SUBMAKEFILES)) -I test $(OMPINCLUDE) $(THIRDPARTYINCLUDE)

#the name of the shared object library for palisade objects.  
PALISADECORELIB := libPALISADEcore$(LIBSUFFIX)
PALISADEPKELIB := libPALISADEpke$(LIBSUFFIX)

PALISADEPYLIB := pycrypto$(LIBSUFFIX)

# run make for all components. you can run any individual component separately
#  by invoking   "make allxxx"  for example, make allcore makes everything in core only

all:
	$(MAKE) gmp_all
	$(MAKE) ntl_all
	$(MAKE) allcore allpke utall 

docs: apidocs

alljava: allcore allpke jwrapper

allpython: allcore allpke pywrapper

alldemos: allcoredemos allpkedemos 

testall: $(CORE_TEST_TARGET) $(PKE_TEST_TARGET) $(TRAPDOOR_TEST_TARGET) $(WIP_TEST_TARGET) $(CIRCUIT_TEST_TARGET) $(ABE_TEST_TARGET) $(SIGNATURE_TEST_TARGET) utall
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):$(ROOTDIR)/$(THIRDPARTYLIBDIR):$(ROOTDIR)/$(EXTLIBDIR) $(BINDIR)/unittest/tests$(EXESUFFIX) -t

# clean up all components. you can clean any individual compoenent separately
#  by invoking   "make cleantargets"  for example
# each corresponding makefile will make the cleanxxxx target
.PHONY: clean
clean: cleancore cleanpke cleandocs cleanbenchmark 
	@echo 'Cleaning top level autogenerated directories'
	$(RM) -rf $(BINDIR) 
	$(RM) -rf src/*/bin

.PHONY: clobber
clobber: clean clean_gmp clean_ntl

.PHONY: libdir
libdir:
	install --directory $(LIB_DEST)

.PHONY: install
install: installcore installpke 

.PHONY: uninstall
uninstall: uninstallcore uninstallpke 

UNITTESTMAINOBJ := $(BINDIR)/unittest/Main_TestAll.o

$(UNITTESTMAINOBJ): test/include/gtest/Main_TestAll.cpp src/core/lib/math/backend.h 
	@mkdir -p $(BINDIR)/unittest
	$(CC) -c $(CPPFLAGS) $(INC) -o $@ $<

utall: $(BINDIR)/unittest/tests$(EXESUFFIX)

include Makefile.core
include Makefile.pke

include Makefile.gmp
include Makefile.ntl

include Makefile.benchmark     #builds the benchmark framework
include Makefile.docs          #populates doxgen documentation

$(BINDIR)/unittest/tests$(EXESUFFIX): $(UNITTESTMAINOBJ) $(COREUNITOBJECTS) $(EXTLIBDIR)/$(PALISADECORELIB) $(PKEUNITOBJECTS) $(EXTLIBDIR)/$(PALISADEPKELIB) $(NTLLIB) $(GMPLIB)
	@mkdir -p $(BINDIR)/unittest
	$(CC) -o $@ $(UNITTESTMAINOBJ) $(COREUNITOBJECTS) $(PKEUNITOBJECTS) $(EXTLIB) -lPALISADEpke -lPALISADEcore $(TEST_LIB) $(NTLLIB) $(GMPLIB)
